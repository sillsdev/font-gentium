lookup base_mark_U {
  lookupflag IgnoreLigatures;
    pos base @U mark @_U;
} base_mark_U;

lookup base_mark_L {
  lookupflag IgnoreLigatures;
    pos base @L mark @_L;
} base_mark_L;

lookup base_mark_O {
  lookupflag IgnoreLigatures;
    pos base @O mark @_O;
} base_mark_O;

lookup base_mark_H {
  lookupflag IgnoreLigatures;
    pos base @H mark @_H;
} base_mark_H;

lookup cursive_R {
  lookupflag IgnoreMarks;
    pos cursive @R_ @R;
} cursive_R;

# provided by _gsub.fea
# languagesystem DFLT dflt;
# languagesystem cyrl dflt;
# languagesystem cyrl SRB;
# languagesystem latn dflt;
# languagesystem latn IPPH;
# languagesystem latn VIT;

feature mark {
  lookup base_mark_U;
  lookup base_mark_L;
  lookup base_mark_O;
  lookup base_mark_H;
  lookup cursive_R;
} mark;

@cMarkFilter_U = [@U_MarkBase @_U];
@cMarkFilter_L = [@L_MarkBase @_L];

lookup mark_mark_U {
  lookupflag UseMarkFilteringSet @cMarkFilter_U;
    pos mark @U_MarkBase mark @_U;
} mark_mark_U;

lookup mark_mark_L {
  lookupflag UseMarkFilteringSet @cMarkFilter_L;
    pos mark @L_MarkBase mark @_L;
} mark_mark_L;

feature mkmk {
  lookup mark_mark_U;
  lookup mark_mark_L;
} mkmk;

# lookup tns_pos { # not needed by tone glyphs currently being used
#   lookupflag IgnoreMarks;
#     pos cursive @TL_ @TL;
# } tns_pos;

# feature kern {
#   lookup tns_pos;
# } kern;

# Gentium

ifinfo(familyName, "Andika|Charis|Gentium") {

# for debugging
# def kpairs() {
#   # l = [('@public.kern1.LCapTopT', '@public.kern2.RSmCurve', '-90')]
#   l = kerninfo(0) # one arg required (not used so can be anything)
#   return l
# } kpairs;

# undo kerning for pairs in UFO followed by an upper mark. usually to apply contextual kerning later
include(../../source/opentype/kernpairs_undo.feax);
# example of content from kernpairs_undo.feax for reference
# def unkpairs() {
#   l = [
#     ('@public.kern1.LCapTopT', '@public.kern2.RSmCurve')
#   ]
#   return l
# } unkpairs;

lookup kernpairs {
  lookupflag IgnoreMarks;
    kernpairs;
} kernpairs;

lookup kernpairs_undo {
  lookupflag 0;
do
  let u = unkpairs();
  # let k = kpairs(); # for debugging
  let k = kerninfo(0); # one arg required (not used so can be anything)
  forlet p = u;
  let k1, k2 = p;
  forlet q = k;
  let g1, g2, n = q;
  let n = -int(n); # should probably use round() but not supported in feax
  if k1 == g1 and k2 == g2; # no way to terminate inner loop
  {
    pos $g1' $n $g2 @_U;
  }
  } kernpairs_undo;

# contextual kerning mainly for base+base+mark
include(../../source/opentype/kern_ctx.feax);
# example of content from kern_ctx.feax for reference
# lookup kern_ctx {
#     pos @public.kern1.LCapTopT' 45 @public.kern2.RSmCurve CombDiaer;
# } kern_ctx;

feature kern {
  lookup kernpairs;
  lookup kernpairs_undo;
  lookup kern_ctx;
} kern;

} 
